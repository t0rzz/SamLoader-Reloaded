name: KMP CI

on:
  push:
    branches: [ "master" ]
    paths:
      - 'common/**'
      - 'desktop/**'
      - 'android/**'
      - 'iosApp/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'gradle.properties'
      - '.github/workflows/kmp-build.yml'
  pull_request:
    branches: [ "master" ]

jobs:
  build-desktop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build Desktop (jvm)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :desktop:build --stacktrace --no-daemon

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build Android APK (debug)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :android:assembleDebug --stacktrace --no-daemon
      - name: Upload APK (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: samloader-android-debug
          path: android/build/outputs/apk/debug/*.apk
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install samloader package
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Get version (from Python package)
        id: getver
        run: |
          echo "ver=$(python - << 'PY'
          import samloader; print(samloader.__version__)
          PY
          )" >> $GITHUB_OUTPUT
      - name: Compute tag name
        id: tagvars
        run: |
          echo "tag=v${{ steps.getver.outputs.ver }}" >> $GITHUB_OUTPUT
      - name: Check if tag exists (remote)
        id: checktag
        shell: bash
        run: |
          set -e
          git fetch --tags --quiet
          TAG="v${{ steps.getver.outputs.ver }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
              echo "exists=true" >> "$GITHUB_OUTPUT"
            else
              echo "exists=false" >> "$GITHUB_OUTPUT"
            fi
          fi
      - name: Create and push tag (if missing)
        if: steps.checktag.outputs.exists != 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "v${{ steps.getver.outputs.ver }}" -m "Release v${{ steps.getver.outputs.ver }}"
          git push https://x-access-token:${{ secrets.T0RZZ_TOKEN }}@github.com/${{ github.repository }}.git "refs/tags/v${{ steps.getver.outputs.ver }}"
      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagvars.outputs.tag }}
          append_body: true
          files: |
            android/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.T0RZZ_TOKEN != '' && secrets.T0RZZ_TOKEN || secrets.GITHUB_TOKEN }}

  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Xcode & SDK
        run: |
          # Prefer explicit Xcode_16.4 if available; fallback to generic Xcode.app
          if [ -d "/Applications/Xcode_16.4.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
          else
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer || true
          fi
          xcodebuild -version
          xcodebuild -showsdks
          SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)
          echo "SDKROOT=$SDKROOT"
          echo "SDKROOT=$SDKROOT" >> $GITHUB_ENV

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare environment (clean konan caches)
        run: |
          # Clean Kotlin/Native caches to force re-download of sysroot/toolchain
          rm -rf /Users/runner/.konan/dependencies || true
          rm -rf /Users/runner/.konan/kotlinc || true
          # show basic konan dir contents for debug
          ls -la /Users/runner/.konan || true

      - name: Quick SDK include debug (search CommonCrypto.h + clang include test)
        run: |
          SDKROOT=${SDKROOT:-$(xcrun --sdk iphoneos --show-sdk-path)}
          echo "Using SDKROOT=$SDKROOT"
          echo "Searching for CommonCrypto.h..."
          find "$SDKROOT" -name CommonCrypto.h -print 2>/dev/null || true
          find /Applications -name CommonCrypto.h -maxdepth 6 -print 2>/dev/null || true
          echo "Listing $SDKROOT/usr/include (first 80 entries):"
          ls -la "$SDKROOT/usr/include" | head -n 80 || true
          echo "clang include search paths:"
          clang -v -E -x c /dev/null -isysroot "$SDKROOT" 2>&1 | sed -n '/#include <...> search starts here:/,/#include <...> search ends here:/p'
          echo "Running clang include test (this should succeed if CommonCrypto resolved):"
          printf '' | clang -v -E -x c - -isysroot "$SDKROOT" -include CommonCrypto/CommonCrypto.h >/dev/null 2>&1 && echo "clang include test OK" || echo "clang include test FAILED"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run CommonCrypto cinterop (debug)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :common:cinteropCommoncryptoIosArm64 --no-daemon --info --stacktrace
        env:
          SDKROOT: ${{ env.SDKROOT }}

      - name: Build iOS frameworks (Gradle)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :iosApp:build --no-daemon --info --stacktrace
        env:
          SDKROOT: ${{ env.SDKROOT }}

      - name: Package iOS frameworks
        run: |
          mkdir -p ios-out || true
          find iosApp/build/bin -type d -name "*Framework" -print0 | while IFS= read -r -d '' dir; do
            base=$(basename "$dir")
            zip -r "ios-out/${base}.zip" "$dir"
          done || true

      - name: Generate Xcode project (XcodeGen)
        run: |
          brew update
          brew install xcodegen || true
          (cd iosApp && xcodegen generate --spec xcodegen/project.yml)
      - name: Build KMP iOS frameworks (Release, device)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :common:linkReleaseFrameworkIosArm64 :iosApp:linkReleaseFrameworkIosArm64 --no-daemon --stacktrace
        env:
          SDKROOT: ${{ env.SDKROOT }}
      - name: Build iOS app with Xcode (unsigned IPA)
        run: |
          DERIVED="build/iosDerivedData"
          xcodebuild -project iosApp/iosApp.xcodeproj -scheme iosApp -sdk iphoneos -configuration Release -derivedDataPath "$DERIVED" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO build
          APP_PATH="$DERIVED/Build/Products/Release-iphoneos/Duofrost.app"
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV

      - name: Package IPA (unsigned)
        if: env.APP_PATH != ''
        run: |
          rm -rf Payload || true
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          zip -r Duofrost-unsigned.ipa Payload

      - name: Upload IPA and frameworks (artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: |
            Duofrost-unsigned.ipa
            ios-out/*.zip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install samloader package
        run: |
          python -m pip install --upgrade pip
          pip install .

      - name: Get version (from Python package)
        id: getver
        run: |
          echo "ver=$(python - << 'PY'
          import samloader; print(samloader.__version__)
          PY
          )" >> $GITHUB_OUTPUT

      - name: Compute tag name
        id: tagvars
        run: |
          echo "tag=v${{ steps.getver.outputs.ver }}" >> $GITHUB_OUTPUT

      - name: Check if tag exists (remote)
        id: checktag
        shell: bash
        run: |
          set -e
          git fetch --tags --quiet
          TAG="v${{ steps.getver.outputs.ver }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
              echo "exists=true" >> "$GITHUB_OUTPUT"
            else
              echo "exists=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Create and push tag (if missing)
        if: steps.checktag.outputs.exists != 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "v${{ steps.getver.outputs.ver }}" -m "Release v${{ steps.getver.outputs.ver }}"
          git push https://x-access-token:${{ secrets.T0RZZ_TOKEN }}@github.com/${{ github.repository }}.git "refs/tags/v${{ steps.getver.outputs.ver }}"

      - name: Upload IPA to GitHub Release
        if: env.APP_PATH != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagvars.outputs.tag }}
          append_body: true
          files: |
            Duofrost-unsigned.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.T0RZZ_TOKEN != '' && secrets.T0RZZ_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Upload iOS frameworks to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagvars.outputs.tag }}
          append_body: true
          files: |
            ios-out/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.T0RZZ_TOKEN != '' && secrets.T0RZZ_TOKEN || secrets.GITHUB_TOKEN }}
