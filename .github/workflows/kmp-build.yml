name: KMP CI

on:
  push:
    branches: [ "master" ]
    paths:
      - 'common/**'
      - 'desktop/**'
      - 'android/**'
      - 'iosApp/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'gradle.properties'
      - '.github/workflows/kmp-build.yml'
  pull_request:
    branches: [ "master" ]

jobs:
  build-desktop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build Desktop (jvm)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :desktop:build --stacktrace --no-daemon

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build Android APK (debug)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :android:assembleDebug --stacktrace --no-daemon
      - name: Upload APK (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: samloader-android-debug
          path: android/build/outputs/apk/debug/*.apk
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install samloader package
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Get version (from Python package)
        id: getver
        run: |
          echo "ver=$(python - << 'PY'
          import samloader; print(samloader.__version__)
          PY
          )" >> $GITHUB_OUTPUT
      - name: Compute tag name
        id: tagvars
        run: |
          echo "tag=v${{ steps.getver.outputs.ver }}" >> $GITHUB_OUTPUT
      - name: Check if tag exists (remote)
        id: checktag
        shell: bash
        run: |
          set -e
          git fetch --tags --quiet
          TAG="v${{ steps.getver.outputs.ver }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
              echo "exists=true" >> "$GITHUB_OUTPUT"
            else
              echo "exists=false" >> "$GITHUB_OUTPUT"
            fi
          fi
      - name: Create and push tag (if missing)
        if: steps.checktag.outputs.exists != 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "v${{ steps.getver.outputs.ver }}" -m "Release v${{ steps.getver.outputs.ver }}"
          git push https://x-access-token:${{ secrets.T0RZZ_TOKEN }}@github.com/${{ github.repository }}.git "refs/tags/v${{ steps.getver.outputs.ver }}"
      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagvars.outputs.tag }}
          append_body: true
          files: |
            android/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.T0RZZ_TOKEN != '' && secrets.T0RZZ_TOKEN || secrets.GITHUB_TOKEN }}

  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      - name: Show Xcode version
        run: |
          xcodebuild -version
          xcrun --sdk iphoneos --show-sdk-path
      - name: Export SDKROOT for Kotlin/Native
        run: echo "SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)" >> $GITHUB_ENV
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build iOS frameworks (unsigned)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.7
          arguments: :iosApp:build --stacktrace --no-daemon
      - name: Build iOS app with Xcode (unsigned IPA)
        run: |
          set -e
          # Create a minimal iOS app using Xcodegen-like steps if needed
          # If an Xcode project exists under iosApp/iosApp.xcodeproj, use it; otherwise, create a stub Compose MPP iOS app via Gradle export
          if [ -d "iosApp/iosApp.xcodeproj" ]; then
            xcodebuild -scheme iosApp -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO build
            APP_PATH=$(find build -type d -name "*.app" -path "*Release-iphoneos*" | head -n1)
          else
            echo "No Xcode project found. Skipping IPA creation."
            APP_PATH=""
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
      - name: Package IPA (unsigned)
        if: env.APP_PATH != ''
        run: |
          set -e
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          zip -r Duofrost-unsigned.ipa Payload
      - name: Upload unsigned IPA artifact
        if: env.APP_PATH != ''
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: Duofrost-unsigned.ipa
      - name: Package iOS frameworks
        run: |
          set -e
          mkdir -p ios-out
          find iosApp/build/bin -type d -name "*Framework" -print0 | while IFS= read -r -d '' dir; do
            base=$(basename "$dir")
            zip -r "ios-out/${base}.zip" "$dir"
          done
      - name: Upload iOS frameworks (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: duofrost-ios-frameworks
          path: ios-out/*.zip
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install samloader package
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Get version (from Python package)
        id: getver
        run: |
          echo "ver=$(python - << 'PY'
          import samloader; print(samloader.__version__)
          PY
          )" >> $GITHUB_OUTPUT
      - name: Compute tag name
        id: tagvars
        run: |
          echo "tag=v${{ steps.getver.outputs.ver }}" >> $GITHUB_OUTPUT
      - name: Check if tag exists (remote)
        id: checktag
        shell: bash
        run: |
          set -e
          git fetch --tags --quiet
          TAG="v${{ steps.getver.outputs.ver }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
              echo "exists=true" >> "$GITHUB_OUTPUT"
            else
              echo "exists=false" >> "$GITHUB_OUTPUT"
            fi
          fi
      - name: Create and push tag (if missing)
        if: steps.checktag.outputs.exists != 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "v${{ steps.getver.outputs.ver }}" -m "Release v${{ steps.getver.outputs.ver }}"
          git push https://x-access-token:${{ secrets.T0RZZ_TOKEN }}@github.com/${{ github.repository }}.git "refs/tags/v${{ steps.getver.outputs.ver }}"
      - name: Upload IPA to GitHub Release
        if: env.APP_PATH != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagvars.outputs.tag }}
          append_body: true
          files: |
            Duofrost-unsigned.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.T0RZZ_TOKEN != '' && secrets.T0RZZ_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Upload iOS frameworks to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagvars.outputs.tag }}
          append_body: true
          files: |
            ios-out/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.T0RZZ_TOKEN != '' && secrets.T0RZZ_TOKEN || secrets.GITHUB_TOKEN }}
